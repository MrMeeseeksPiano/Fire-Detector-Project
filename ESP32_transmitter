#include <Arduino.h>
#include <esp_now.h>
#include <WiFi.h>

// Define TX and RX pins for UART (change if needed)
#define TXD1 19
#define RXD1 21
int i = 0;

// Use Serial1 for UART communication
HardwareSerial mySerial(2);
uint8_t broadcastAddress[] = {0xe4, 0x65, 0xb8, 0xb0, 0x4b, 0xd4};

typedef struct struct_message
{
  char a[32];
} struct_message;

struct_message myData;

esp_now_peer_info_t peerInfo;
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status)
{
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

void setup()
{
  Serial.begin(115200);
  mySerial.begin(9600, SERIAL_8N1, RXD1, TXD1); // UART setup

  Serial.println("ESP32 UART Receiver");

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK)
  {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);

  // Register peer
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  // Add peer
  if (esp_now_add_peer(&peerInfo) != ESP_OK)
  {
    Serial.println("Failed to add peer");
    return;
  }
}

void loop()
{
  if (mySerial.available())
  {
    char c;

    // Aguarda até receber um caractere válido
    while (mySerial.available())
    {
      c = mySerial.read();
    }

    Serial.println(c);
    Serial.print("Counter: ");
    Serial.println(i);

    if (c == 's')
      strcpy(myData.a, "o");
    else if (c == 'w')
    {
      strcpy(myData.a, "n");
      i++;
    }

    // Envia via ESP-NOW somente se recebeu algo válido
    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&myData, sizeof(myData));

    if (result == ESP_OK)
    {
      Serial.println("Sent with success");
    }
    else
    {
      Serial.println("Error sending the data");
    }
  }

  delay(2000); // Esse delay ainda pode ser reduzido se necessário
}

/*void loop()
{
  while (mySerial.available())
  { // esvaziar buffer?
    mySerial.read();
  }

  // Check if data is available to read
  if (mySerial.available())
  {
    char c = mySerial.read();
    Serial.println(c);
    Serial.print("Counter: ");
    Serial.println(i);

    if (c == 's')
      strcpy(myData.a, "o");
    else if (c == 'w')
    {
      strcpy(myData.a, "n");
      i++;
    }
  }

  // Send message via ESP-NOW
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&myData, sizeof(myData));

  if (result == ESP_OK)
  {
    Serial.println("Sent with success");
  }
  else
  {
    Serial.println("Error sending the data");
  }
  delay(1000);
}*/
